{"version":3,"sources":["components/theme.ts","components/Button.ts","components/Input.ts","components/Textarea.ts","wss/Log.tsx","wss/index.tsx","decorators/computed.ts","wss/model.ts","App.tsx","index.tsx"],"names":["theme","typography","fontSize","fontFamily","default","color","borderColor","borderRadius","focus","active","spacing","n","size","lineHeight","height","Button","styled","button","Input","input","TextArea","textarea","Wrapper","div","NoRecords","Row","props","isReq","css","isHeader","DataCol","InOutCol","LenCol","TimeCol","In","span","Channel","type","message","length","ts","date","Date","ms","getMilliseconds","toLocaleTimeString","num","s","String","pad","Header","Log","source","render","map","key","Group","connectButtonWidth","UriInput","connected","ConnectButton","RequestTextArea","SendButton","WSS","wss","model","useState","uri","setUri","setMessage","log","useRxStateResult","log$","isConnected$","placeholder","defaultValue","onChange","e","target","value","onClick","connect","disabled","send","clearLog","text","computed","propertyKey","descriptor","get","this","apply","WssModel","currentWSS$","req$","Subject","res$","subscriptions","connected$","BehaviorSubject","clearCommand$","closed","Error","next","unsubscribe","complete","forEach","subscription","disconnect","webSocket","url","serializer","t","deserializer","data","openObserver","console","push","subscribe","error","asObservable","req$$","pipe","req","now","res$$","res","merge","scan","acc","val","H1","h1","App","className","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2706fd2a.chunk.js","sourcesContent":["const space = 4;\n\nexport const theme = {\n    typography: {\n        fontSize: 14,\n        fontFamily: `'Ubuntu', sans-serif`\n    },\n    default: {\n        color: 'white',\n        borderColor: '#d9d9d9',\n        borderRadius: space\n    },\n    focus: {\n        color: '#40a9ff',\n        borderColor: '#40a9ff'\n    },\n    active: {\n        color: '#096dd9',\n        borderColor: '#096dd9'\n    },\n    spacing: (n: number) => n * space,\n    size: {\n        lineHeight: '1.5',\n        height: 8 * space\n    }\n};\n\nexport default theme;\n","import theme from './theme';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n    background-image: none;\n    background-color: black;\n    border: 1px solid ${theme.default.borderColor};\n    border-radius: ${theme.spacing(1)}px;\n    color: ${theme.default.color};\n    cursor: pointer;\n    display: inline-block;\n    font-size: ${theme.typography.fontSize}px;\n    height: ${theme.size.height}px;\n    line-height: ${theme.size.lineHeight};\n    outline: 0;\n    padding: 0 ${theme.spacing(3)}px;\n    text-align: center;\n    touch-action: manipulation;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    white-space: nowrap;\n\n    &:active {\n        color: ${theme.active.color};\n        border-color: ${theme.active.borderColor};\n        background-color: black;\n    }\n\n    &:hover(not:disabled), &:focus {\n        color: ${theme.focus.color};\n        border-color: ${theme.focus.borderColor};\n    }\n\n    &:disabled {\n        color: gray;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    outline: 0;\n    line-height: 1.5;\n    position: relative;\n    display: inline-block;\n    white-space: nowrap;\n    text-align: left;\n    background-image: none;\n    border: 1px solid transparent;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    touch-action: manipulation;\n    height: 30px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-radius: 4px;\n    color: white;\n    background-color: transparent;\n    border-color: #d9d9d9;\n\n    &:hover, &:focus {\n        border-color: #40a9ff;\n    }\n\n    &:active {\n        border-color: #096dd9;\n    }\n`\n","import styled from 'styled-components';\n\nexport const TextArea = styled.textarea`\n    outline: 0;\n    line-height: 1.5;\n    position: relative;\n    display: inline-block;\n    white-space: nowrap;\n    text-align: left;\n    background-image: none;\n    border: 1px solid transparent;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    touch-action: manipulation;\n    height: 128px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-radius: 4px;\n    color: white;\n    background-color: transparent;\n    border-color: #d9d9d9;\n\n    &:hover, &:focus {\n        border-color: #40a9ff;\n    }\n\n    &:active {\n        border-color: #096dd9;\n    }\n`\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ILog } from './model';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n`\n\nconst NoRecords = styled.div`\n    display: 1;\n`\n\ninterface RowProps {\n    isReq?: boolean;\n    isHeader?: boolean;\n}\n\nconst Row = styled.div`\n    display: flex;\n    border-bottom: 1px solid green;\n    ${(props: RowProps) => props.isReq && css`\n        color: #eeff00;\n        background-color: #274c22;\n    `}\n    ${(props: RowProps) => props.isHeader && css`\n        height: 24px;\n        line-height: 24px;\n        background-color: black;\n    `}\n`;\n\nconst DataCol = styled.div`\n    flex: 1;\n`;\n\nconst InOutCol = styled.div`\n    width: 20px;\n`;\n\nconst LenCol = styled.div`\n    width: 100px;\n`;\n\nconst TimeCol = styled.div`\n    width: 150px;\n`;\n\nexport interface LogProps<Message> {\n    source: ILog<Message>[];\n    render: (m: Message) => React.ReactNode\n}\n\ninterface MessageProps<Message> {\n    type: string,\n    message: Message,\n    length: number,\n    ts: number\n}\n\nconst In = styled.span`\n    color: red;\n`\n\nfunction pad(num: number, size: number) {\n    var s = String(num);\n    while (s.length < (size || 2)) {s = \"0\" + s;}\n    return s;\n}\n\nfunction Channel<Message>({type, message, length, ts}: MessageProps<Message>) {\n    const isReq = type === 'req';\n    const date = new Date(ts);\n    const ms = date.getMilliseconds()\n    return (\n        <Row isReq={isReq}>\n            <InOutCol>{isReq? '⬆': <In>⬇</In>}</InOutCol>\n            <DataCol><pre>{message}</pre></DataCol>\n            <LenCol>{length}</LenCol>\n            <TimeCol><small>{date.toLocaleTimeString()}</small>.<strong>{pad(ms, 3)}</strong></TimeCol>\n        </Row>\n    )\n}\n\nfunction Header() {\n    return (\n        <Row isHeader>\n            <DataCol>Data</DataCol>\n            <LenCol>Length</LenCol>\n            <TimeCol>Time</TimeCol>\n        </Row>\n    )\n}\n\nexport function Log<Message>({source, render}: LogProps<Message>) {\n    return (\n        <Wrapper>\n            <Header/>\n            {source.length === 0 && <NoRecords>No Records</NoRecords>}\n            {source.length > 0 && source.map(({type, message, ts}) => {\n                return <Channel key={ts} type={type} message={message} length={(message as any).length} ts={ts}/>;\n            })}\n        </Wrapper>\n    );\n}\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { WssModel } from './model';\nimport { useRxStateResult } from '@reonomy/reactive-hooks';\nimport { theme, Button, Input, TextArea } from '../components';\nimport { Log } from './Log';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nconst Group = styled.div`\n    display: flex;\n    margin: ${theme.spacing(1)}px;\n    position: relative;\n`;\n\ninterface UriInputProps {\n    connected: boolean\n}\n\nconst connectButtonWidth = theme.spacing(30);\n\nconst UriInput = styled(Input)`\n    flex: 1;\n    padding-right: ${connectButtonWidth}px;\n    ${({connected}: UriInputProps) => connected && css`\n        color: #eeff00;\n        background-color: #274c22;\n    `}\n`;\n\nconst ConnectButton = styled(Button)`\n    border-radius: 0 ${theme.spacing(1)}px ${theme.spacing(1)}px 0;\n    position: absolute;\n    right: 0;\n    width: ${connectButtonWidth}px;\n`;\n\nconst RequestTextArea = styled(TextArea)`\n    flex: 1;\n`;\n\nconst SendButton = styled(Button)`\n    border-radius: 0 0 ${theme.spacing(1)}px 0;\n    bottom: 0;\n    position: absolute;\n    right: 0;\n    width: ${connectButtonWidth}px;\n`;\n\nexport interface WssProps<Message> {\n    model: WssModel<Message>\n}\n\nfunction WSS({model: wss}:  WssProps<string>) {\n    const [uri, setUri] = useState('ws://localhost:8081/greeter');\n    const [message, setMessage] = useState('');\n    const log = useRxStateResult(wss.log$) || [];\n    const connected = useRxStateResult(wss.isConnected$) || false;\n\n    const connect = () => wss.connect(uri)\n    const send = () => wss.send(message);\n    const clear = () => wss.clearLog();\n\n    return (\n        <Wrapper>\n            <Group>\n                <UriInput connected={connected} type=\"text\" placeholder=\"ws://...\" defaultValue={uri} onChange={e => setUri(e.target.value)} />\n                <ConnectButton type=\"button\" onClick={connect}>Connect</ConnectButton>\n            </Group>\n            <Group>\n                <RequestTextArea onChange={e => setMessage(e.target.value)}/>\n                <SendButton disabled={!connected} type=\"button\" onClick={send}>Send</SendButton>\n            </Group>\n            <Group>\n                <Button type=\"button\" onClick={clear}>Clear</Button>\n            </Group>\n            <Group>\n                <Log source={log} render={(text: string) => text}/>\n            </Group>\n        </Wrapper>\n    );\n}\n\nexport default WSS;","export function computed<T>(\n    target: any,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>\n  ) {\n    const get = descriptor.get;\n    descriptor.get = function getLazy() {\n      const that = this as any;\n      if (!that[`__${propertyKey}`] && get) {\n        that[`__${propertyKey}`] = get.apply(that);\n      }\n      return that[`__${propertyKey}`] as T;\n    };\n  }\n","import { Subject, Subscription, BehaviorSubject } from 'rxjs';\nimport { scan, merge, map } from 'rxjs/operators';\nimport { computed } from '../decorators/computed';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\n\nexport interface ILog<Message> {\n    type: string, \n    ts: number,\n    message: Message\n}\n\nexport class WssModel<Message> {\n    private currentWSS$: WebSocketSubject<Message> | null = null;\n    private req$ = new Subject<Message>();\n    private res$ = new Subject<Message>();\n    private subscriptions: Subscription[] = [];\n    private connected$ = new BehaviorSubject(false);\n\n    /**\n     * Sends a message to a websocket.\n     * @param message \n     */\n    public send(message: Message) {\n        if (!this.currentWSS$ || this.currentWSS$.closed) {\n            throw new Error(\"Websocket is not connected.\")\n        }\n        this.req$.next(message);\n    }\n\n    /**\n     * Disconnects from the active websocket.\n     */\n    public disconnect() {\n        if (this.currentWSS$) {\n            this.currentWSS$.unsubscribe();\n            this.currentWSS$.complete();\n            this.subscriptions.forEach(subscription => subscription.unsubscribe());\n            this.subscriptions = [];\n            this.connected$.next(false);\n        }\n    }\n\n    /**\n     * Connects to a given websocket.\n     * @param uri \n     */\n    public connect(uri: string) {\n        if (uri && uri.length > 0) {\n            this.disconnect();\n            this.currentWSS$ = webSocket<Message>({\n                url: uri, \n                serializer: t => t as any, \n                deserializer: (e: MessageEvent) => e.data,\n                openObserver: {\n                    next: () => {\n                        console.log(`connected to ${uri}`);\n                        this.connected$.next(true);\n                    }\n                }\n            });\n\n            this.subscriptions.push(this.req$.subscribe(this.currentWSS$));\n            this.subscriptions.push(this.currentWSS$.subscribe({\n                next: data => this.res$.next(data),\n                error: (error) => {\n                    console.log('error', error);\n                    this.disconnect();\n                },\n                complete: () => {\n                    console.log('complete');\n                    this.disconnect();\n                }\n            }));\n        }\n    }\n\n    private clearCommand$ = new Subject<'clear'>()\n    public clearLog() {\n        this.clearCommand$.next('clear');\n    }\n\n    @computed public get isConnected$() {\n        return this.connected$.asObservable();\n    }\n\n    @computed public get log$() {\n        const req$$ = this.req$.pipe(map(req => ({type: 'req', ts: Date.now(), message: req})));\n        const res$$ = this.res$.pipe(map(res => ({type: 'res', ts: Date.now(), message: res})));\n\n        return req$$.pipe(\n            merge(res$$),\n            merge(this.clearCommand$),\n            scan((acc: ILog<Message>[], val: ILog<Message> | 'clear') => {\n                if (val === 'clear') return [];\n                return [...acc, val]\n            }, [])\n        )\n    }\n}\n","import React from 'react';\nimport WSS from './wss';\nimport { WssModel } from './wss/model';\nimport { theme } from './components';\nimport styled from 'styled-components';\n\nconst H1 = styled.h1`\n  margin: ${theme.spacing(1)}px;\n`\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <H1>YAWC</H1>\n      <WSS model={new WssModel<string>()}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}