{"version":3,"sources":["components/theme.ts","components/Button.ts","components/Input.ts","components/Textarea.ts","wss/Log.tsx","wss/index.tsx","decorators/computed.ts","models/ws-logger.ts","models/ws.ts","App.tsx","index.tsx"],"names":["theme","typography","fontSize","fontFamily","default","color","borderColor","borderRadius","focus","active","spacing","n","size","lineHeight","height","Button","styled","button","Input","input","TextArea","textarea","Wrapper","div","NoRecords","Row","props","isReq","css","isHeader","DataCol","InfoCol","LenCol","TimeCol","In","span","Ev","Err","Info","type","Channel","message","length","ts","date","Date","ms","getMilliseconds","toLocaleTimeString","num","s","String","pad","Header","Log","source","map","key","Group","connectButtonWidth","UriInput","connected","ConnectButton","RequestTextArea","SendButton","WSS","wss","model","useState","uri","setUri","setMessage","log","useRxStateResult","log$","isConnected$","connect","tabIndex","placeholder","defaultValue","onChange","e","target","value","onKeyDown","keyCode","onClick","disabled","send","clearLog","computed","propertyKey","descriptor","get","this","apply","WsLogger","events$","Subject","clearCommand$","next","connected$","pipe","req$$","req$","req","now","res$$","res$","res","error","isWsError","code","reason","events$$","merge","scan","acc","val","BehaviorSubject","current$","subscriptions","serializer","t","deserializer","data","disconnect","webSocket","url","openObserver","push","subscribe","console","complete","unsubscribe","forEach","subscription","closed","Error","H1","h1","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff179083.chunk.js","sourcesContent":["const space = 4;\n\nexport const theme = {\n    typography: {\n        fontSize: 14,\n        fontFamily: `'Ubuntu', sans-serif`\n    },\n    default: {\n        color: 'white',\n        borderColor: '#d9d9d9',\n        borderRadius: space\n    },\n    focus: {\n        color: '#40a9ff',\n        borderColor: '#40a9ff'\n    },\n    active: {\n        color: '#096dd9',\n        borderColor: '#096dd9'\n    },\n    spacing: (n: number) => n * space,\n    size: {\n        lineHeight: '1.5',\n        height: 8 * space\n    }\n};\n\nexport default theme;\n","import theme from './theme';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n    background-image: none;\n    background-color: black;\n    border: 1px solid ${theme.default.borderColor};\n    border-radius: ${theme.spacing(1)}px;\n    color: ${theme.default.color};\n    cursor: pointer;\n    display: inline-block;\n    font-size: ${theme.typography.fontSize}px;\n    height: ${theme.size.height}px;\n    line-height: ${theme.size.lineHeight};\n    outline: 0;\n    padding: 0 ${theme.spacing(3)}px;\n    text-align: center;\n    touch-action: manipulation;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    white-space: nowrap;\n\n    &:active {\n        color: ${theme.active.color};\n        border-color: ${theme.active.borderColor};\n        background-color: black;\n    }\n\n    &:hover(not:disabled), &:focus {\n        color: ${theme.focus.color};\n        border-color: ${theme.focus.borderColor};\n    }\n\n    &:disabled {\n        color: gray;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    outline: 0;\n    line-height: 1.5;\n    position: relative;\n    display: inline-block;\n    white-space: nowrap;\n    text-align: left;\n    background-image: none;\n    border: 1px solid transparent;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    touch-action: manipulation;\n    height: 30px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-radius: 4px;\n    color: white;\n    background-color: transparent;\n    border-color: #d9d9d9;\n\n    &:hover, &:focus {\n        border-color: #40a9ff;\n    }\n\n    &:active {\n        border-color: #096dd9;\n    }\n`\n","import styled from 'styled-components';\n\nexport const TextArea = styled.textarea`\n    outline: 0;\n    line-height: 1.5;\n    position: relative;\n    display: inline-block;\n    white-space: nowrap;\n    text-align: left;\n    background-image: none;\n    border: 1px solid transparent;\n    transition: all .3s cubic-bezier(.645, .045, .355, 1);\n    user-select: none;\n    touch-action: manipulation;\n    height: 128px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-radius: 4px;\n    color: white;\n    background-color: transparent;\n    border-color: #d9d9d9;\n\n    &:hover, &:focus {\n        border-color: #40a9ff;\n    }\n\n    &:active {\n        border-color: #096dd9;\n    }\n`\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { LogMessage } from '../models/ws-logger';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n`\n\nconst NoRecords = styled.div`\n    display: 1;\n`\n\ninterface RowProps {\n    isReq?: boolean;\n    isHeader?: boolean;\n}\n\nconst Row = styled.div`\n    display: flex;\n    border-bottom: 1px solid green;\n    ${(props: RowProps) => props.isReq && css`\n        color: #eeff00;\n        background-color: #274c22;\n    `}\n    ${(props: RowProps) => props.isHeader && css`\n        height: 24px;\n        line-height: 24px;\n        background-color: black;\n    `}\n`;\n\nconst DataCol = styled.div`\n    flex: 1;\n`;\n\nconst InfoCol = styled.div`\n    width: 20px;\n`;\n\nconst LenCol = styled.div`\n    width: 100px;\n`;\n\nconst TimeCol = styled.div`\n    width: 150px;\n`;\n\nexport interface LogProps {\n    source: LogMessage[];\n}\n\ninterface MessageProps<Message> {\n    type: string,\n    message: Message,\n    length: number,\n    ts: number\n}\n\nconst In = styled.span`\n    color: red;\n`\n\nconst Ev = styled.span`\n    color: grey;\n`\n\nconst Err = styled.span`\n    color: red;\n`\n\nfunction pad(num: number, size: number) {\n    var s = String(num);\n    while (s.length < (size || 2)) {s = \"0\" + s;}\n    return s;\n}\n\n\nfunction Info({type}: {type: string}) {\n    if (type === 'req') return <>⬆</>;\n    if (type === 'res') return <In>⬇</In>;\n    if (type === 'event') return <Ev>[𝖎]</Ev>;\n    if (type === 'error') return <Err>𝓔</Err>;\n    return null;\n}\n\nfunction Channel<Message>({type, message, length, ts}: MessageProps<Message>) {\n    const isReq = type === 'req';\n    const date = new Date(ts);\n    const ms = date.getMilliseconds()\n    return (\n        <Row isReq={isReq}>\n            <InfoCol><Info type={type}/></InfoCol>\n            <DataCol><pre>{message}</pre></DataCol>\n            <LenCol>{type === 'req' || type === 'res'? length: '--'}</LenCol>\n            <TimeCol><small>{date.toLocaleTimeString()}</small>.<strong>{pad(ms, 3)}</strong></TimeCol>\n        </Row>\n    )\n}\n\nfunction Header() {\n    return (\n        <Row isHeader>\n            <DataCol>Data</DataCol>\n            <LenCol>Length</LenCol>\n            <TimeCol>Time</TimeCol>\n        </Row>\n    )\n}\n\nexport function Log<Message>({source}: LogProps) {\n    return (\n        <Wrapper>\n            <Header/>\n            {source.length === 0 && <NoRecords>No Records</NoRecords>}\n            {source.length > 0 && source.map(({type, message, ts}) => {\n                return <Channel key={ts} type={type} message={message} length={(message as any).length} ts={ts}/>;\n            })}\n        </Wrapper>\n    );\n}\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport WsLogger from '../models/ws-logger';\nimport { useRxStateResult } from '@reonomy/reactive-hooks';\nimport { theme, Button, Input, TextArea } from '../components';\nimport { Log } from './Log';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nconst Group = styled.div`\n    display: flex;\n    margin: ${theme.spacing(1)}px;\n    position: relative;\n`;\n\ninterface UriInputProps {\n    connected: boolean\n}\n\nconst connectButtonWidth = theme.spacing(30);\n\nconst UriInput = styled(Input)`\n    flex: 1;\n    padding-right: ${connectButtonWidth}px;\n    ${({connected}: UriInputProps) => connected && css`\n        color: #eeff00;\n        background-color: #274c22;\n    `}\n`;\n\nconst ConnectButton = styled(Button)`\n    border-radius: 0 ${theme.spacing(1)}px ${theme.spacing(1)}px 0;\n    position: absolute;\n    right: 0;\n    width: ${connectButtonWidth}px;\n`;\n\nconst RequestTextArea = styled(TextArea)`\n    flex: 1;\n`;\n\nconst SendButton = styled(Button)`\n    border-radius: 0 0 ${theme.spacing(1)}px 0;\n    bottom: 0;\n    position: absolute;\n    right: 0;\n    width: ${connectButtonWidth}px;\n`;\n\nexport interface WssProps<Message> {\n    model: WsLogger<Message>\n}\n\nfunction WSS({model: wss}:  WssProps<string>) {\n    const [uri, setUri] = useState('');\n    const [message, setMessage] = useState('');\n    const log = useRxStateResult(wss.log$) || [];\n    const connected = useRxStateResult(wss.isConnected$) || false;\n\n    const connect = () => wss.connect({ uri })\n    const send = () => wss.send(message);\n    const clear = () => wss.clearLog();\n\n    return (\n        <Wrapper>\n            <Group>\n                <UriInput \n                    tabIndex={1} \n                    type=\"text\" \n                    placeholder=\"ws://...\" \n                    defaultValue={uri} \n                    connected={connected} \n                    onChange={e => setUri(e.target.value)}\n                    onKeyDown={e => e.keyCode === 13 && connect()} />\n                <ConnectButton \n                    tabIndex={2} \n                    type=\"button\" \n                    onClick={connect}>\n                    Connect\n                </ConnectButton>\n            </Group>\n            <Group>\n                <RequestTextArea \n                    tabIndex={3} \n                    placeholder=\"Request payload\" \n                    onChange={e => setMessage(e.target.value)}/>\n                <SendButton \n                    tabIndex={4} \n                    disabled={!connected} \n                    type=\"button\" \n                    onClick={send}>\n                    Send\n                </SendButton>\n            </Group>\n            <Group>\n                <Button \n                    tabIndex={5} \n                    type=\"button\" \n                    onClick={clear}>\n                    Clear\n                </Button>\n            </Group>\n            <Group>\n                <Log source={log} />\n            </Group>\n        </Wrapper>\n    );\n}\n\nexport default WSS;","export function computed<T>(\n    target: any,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>\n  ) {\n    const get = descriptor.get;\n    descriptor.get = function getLazy() {\n      const that = this as any;\n      if (!that[`__${propertyKey}`] && get) {\n        that[`__${propertyKey}`] = get.apply(that);\n      }\n      return that[`__${propertyKey}`] as T;\n    };\n  }\n","import { Subject, Observable } from 'rxjs';\nimport { scan, merge, map } from 'rxjs/operators';\nimport { computed } from '../decorators/computed';\nimport Ws, { WsError } from './ws'\n\nexport interface LogMessage {\n    type: 'req' | 'res' | 'error' | 'event',\n    ts: number,\n    message: string,\n}\n\nfunction isWsError<Message>(res: Message | WsError): res is WsError {\n    return typeof (res as WsError).error !== 'undefined';\n}\n\nexport default class WsLogger<Message> extends Ws<Message> {\n    private events$ = new Subject<LogMessage>();\n\n    private clearCommand$ = new Subject<'clear'>()\n    /**\n     * Cleans up current log.\n     */\n    public clearLog() {\n        this.clearCommand$.next('clear');\n    }\n\n    @computed public get isConnected$(): Observable<boolean> {\n        return this.connected$.pipe(map(({connected}) => connected));\n    }\n\n    @computed public get uri$(): Observable<string | void> {\n        return this.connected$.pipe(map(({uri}) => uri));\n    }\n\n    @computed public get log$() {\n        const req$$ = this.req$.pipe(map(req => ({ type: 'req' as 'req', ts: Date.now(), message: `${req}` })));\n        const res$$ = this.res$.pipe(map(res => {\n            if (isWsError(res)) {\n                return { type: 'error' as 'error', ts: Date.now(), message: `code: ${res.error.code} reason: '${res.error.reason}'` };\n            }\n            return { type: 'res' as 'res', ts: Date.now(), message: `${res}` };\n        }));\n        const events$$ = this.connected$.pipe(map(({connected, uri}) => ({\n            type: 'event' as 'event',\n            ts: Date.now(),\n            message: connected? `${uri} [connected]`: `${uri? (uri + ' '): ''}[disconnected]`\n        })));\n\n        return req$$.pipe(\n            merge(res$$),\n            merge(events$$),\n            merge(this.clearCommand$),\n            scan((acc: LogMessage[], val: LogMessage | 'clear') => {\n                if (val === 'clear') return [];\n                return [...acc, val]\n            }, [])\n        )\n    }\n}\n","import { Subject, Subscription, BehaviorSubject } from 'rxjs';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { WebSocketMessage } from 'rxjs/internal/observable/dom/WebSocketSubject';\n\nexport interface Connection {\n    uri?: string;\n    connected: boolean;\n}\n\nexport interface ConnectionConfig<Message> {\n    uri: string;\n    serializer?: (value: Message) => WebSocketMessage;\n    deserializer?: (event: MessageEvent) => Message;\n}\n\nexport interface WsError {\n    error: {\n        code: number;\n        reason: string;\n    }\n}\n\n/**\n * Base model for WebSockets.\n */\nexport default class Ws<Message> {\n    protected req$ = new Subject<Message>();\n    protected res$ = new Subject<Message | WsError>();\n    protected connected$ = new BehaviorSubject<Connection>({ connected: false });\n\n    private current$: WebSocketSubject<Message> | null = null;\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Connects to a given websocket.\n     * @param uri \n     */\n    public connect({uri, serializer = t => t as any, deserializer = (e: MessageEvent) => e.data}: ConnectionConfig<Message>) {\n        if (uri && uri.length > 0) {\n            this.disconnect();\n            this.current$ = webSocket<Message>({\n                url: uri, \n                serializer, \n                deserializer,\n                openObserver: {\n                    next: () => this.connected$.next({uri, connected: true})\n                }\n            });\n\n            this.subscriptions.push(this.req$.subscribe(this.current$));\n            this.subscriptions.push(this.current$.subscribe({\n                next: data => this.res$.next(data),\n                error: (error) => {\n                    console.error(error);\n                    this.res$.next({error: {\n                        code: error.code,\n                        reason: error.reason\n                    }});\n                    this.disconnect();\n                },\n                complete: () => this.disconnect()\n            }));\n        }\n    }\n\n    /**\n     * Disconnects from the active websocket.\n     */\n    public disconnect() {\n        if (this.current$) {\n            this.current$.unsubscribe();\n            this.current$.complete();\n            this.subscriptions.forEach(subscription => subscription.unsubscribe());\n            this.subscriptions = [];\n            this.connected$.next({...this.connected$.value, connected: false});\n        }\n    }\n\n    /**\n     * Sends a message to a websocket.\n     * @param message \n     */\n    public send(message: Message) {\n        if (!this.current$ || this.current$.closed) {\n            throw new Error(\"Websocket is not connected.\")\n        }\n        this.req$.next(message);\n    }\n}\n","import React from 'react';\nimport WSS from './wss';\nimport WsLogger from './models/ws-logger';\nimport { theme } from './components';\nimport styled from 'styled-components';\n\nconst H1 = styled.h1`\n  margin: ${theme.spacing(1)}px;\n`\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <H1>YAWC</H1>\n      <WSS model={new WsLogger<string>()}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}